import { type NextPage } from "next";
import Head from "next/head";
import axios from "axios";
import Image from "next/image";
import { useState } from "react";
import type Dog from "../interfaces";
import Choice from "../components/choice";
import Score from "../components/score";
import Link from "next/link";
import Letter from "../components/letter";

const totalDogs = 8;

const getDog = async () => {
  const image = await axios
    .get(`https://dog.ceo/api/breeds/image/random`)
    .then((res) => res.data.message);
  const name = image.split("/")[4].split("-").reverse().join("");
  return { image, name } as Dog;
};

const Home: NextPage = ({ dog, dog2 }: any) => {
  const [currentDog, setCurrentDog] = useState(dog);
  const [nextDog, setNextDog] = useState(dog2);
  const [loadingDogs, setLoadingDogs] = useState(false);
  const [score, setScore] = useState([] as Array<boolean>);

  if (currentDog == (null || undefined)) {
    return <div>Loading...</div>;
  }

  const newDog = async (correct: boolean) => {
    if (!loadingDogs) {
      setLoadingDogs(true);
      setTimeout(() => {
        setScore([...score, correct]);
        setCurrentDog(nextDog);
        setLoadingDogs(false);
      }, 2000);
      const image = await axios
        .get(`https://dog.ceo/api/breeds/image/random`)
        .then((res) => res.data.message);
      let name = image.split("/")[4].split("-").reverse().join("");;
      setNextDog({ image, name } as Dog);
    }
  };

  const reset = () => {
    setScore([]);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-900">
        <div className="laptop: flex w-[1024px] justify-center">
          {score.length >= 10 ? (
            <div className="absolute top-0 left-0 flex h-full w-full items-center justify-center">
              <div className="flex flex-col items-center justify-center">
                <h1 className="text-4xl text-white">
                  You Scored: {score.filter(Boolean).length}!
                </h1>
                <Link href="/game/standard">
                  <div
                    className="flex h-16 w-32 cursor-pointer items-center justify-center bg-white text-black">
                    <p>Restart</p>
                  </div>
                </Link>
              </div>
            </div>
          ) : (
            <>
              <div>
                {/* <h1>Send this link to challenge someone to the same dogs!</h1> */}
                {currentDog != (null || undefined) && (
                  <>
                    <div className="flex flex-wrap justify-center w-[600px] h-[500px] max-h-[500px] overflow-hidden">
                      <Image className="object-contain rounded-t-2xl " width={600} height={500} priority={true} alt={currentDog.name} src={currentDog.image} />
                    </div>
                    <div className="flex flex-col py-2 px-4 bg-white h-[120px] rounded-b-2xl justify-around">
                      <h1 className="text-2xl text-black">Guess the Breed.</h1>
                      <div className="flex w-[550px] text-center gap-2">
                        {currentDog.name.split("").map((letter:string, index:number) => (
                          <Letter key={index} letter={letter} guessed={false}/>
                        ))}
                      </div>
                      <div className="flex justify-between">
                        <div className="text-blue-600 text-lg font-bold">6/8</div>
                        <p className="text-lg text-blue-600 font-bold">Skip.</p>
                      </div>
                    </div>
                  </>
                )}
              </div>
            </>
          )}
        </div>
        {nextDog != (null || undefined) && (
          <div className="hidden">
            <Image width={300} height={300} priority={true} alt={nextDog.name} src={nextDog.image} />
          </div>
        )}
      </main>
    </>
  );
};

export async function getStaticProps() {
  // Instead of fetching your `/api` route you can call the same
  // function directly in `getStaticProps`
  const dog = await getDog();
  const dog2 = await getDog();

  // Props returned will be passed to the page component
  return { props: { dog, dog2 } };
}

export default Home;
