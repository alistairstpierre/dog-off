import { type NextPage } from "next";
import Head from "next/head";
import axios from "axios";
import Image from "next/image";
import { useState } from "react";

interface Dog {
  name: string;
  image: string;
}

const dogsDisplayed = 4;

const getDogs = async (amount: number) => {
  const savedDogs = [];
  for (let i = 0; i < amount; i++) {
    const image = await axios
      .get(`https://dog.ceo/api/breeds/image/random`)
      .then((res) => res.data.message);
    const name = image.split("/")[4];
    savedDogs.push({ name, image });
  }
  console.log(savedDogs);
  return savedDogs;
};

const Home: NextPage = ({ dogs, dogs2, initialDogIndex }: any) => {
  const [dogIndex, setDogIndex] = useState(initialDogIndex);
  const [storedDogs, setStoredDogs] = useState(dogs);
  const [nextDogs, setNextDogs] = useState(dogs2);
  const [correct, setCorrect] = useState("");

  if (storedDogs.length === 0) {
    return <div>Loading...</div>;
  }

  const newDogs = async (index:number, amount: number) => {
    dogIndex == index ? setCorrect("Correct!") : setCorrect("Wrong!");
    setStoredDogs([...nextDogs]);
    setDogIndex(Math.floor(Math.random() * dogsDisplayed));
    const savedDogs = [];
    for (let i = 0; i < amount; i++) {
      const image = await axios
        .get(`https://dog.ceo/api/breeds/image/random`)
        .then((res) => res.data.message);
      const name = image.split("/")[4];
      savedDogs.push({ name, image });
    }
    setNextDogs(savedDogs);
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <h1 className="text-8xl font-bold text-white">{correct}</h1>
        {storedDogs.length > 0 && (
          <>
            <h1 className="text-4xl font-bold text-white pb-4">
              Which dog is the {storedDogs[dogIndex].name}
            </h1>
            <div className="flex flex-wrap justify-center">
              {storedDogs.slice(0, 4).map((dog: Dog, index: number) => (
                <Image
                  width={500}
                  height={500}
                  key={index}
                  alt={dog.name}
                  src={dog.image}
                  className="max-h-80 w-80 rounded-md shadow-xl hover:outline hover:outline-4 hover:outline-white"
                  onClick={() => {
                    newDogs(index, 4);
                  }}
                />
              ))}
            </div>
          </>
        )}
      </main>
    </>
  );
};

export async function getStaticProps() {
  // Instead of fetching your `/api` route you can call the same
  // function directly in `getStaticProps`
  const dogs = await getDogs(dogsDisplayed);
  const dogs2 = await getDogs(dogsDisplayed);
  const initialDogIndex = Math.floor(Math.random() * dogs.length);

  // Props returned will be passed to the page component
  return { props: { dogs, dogs2, initialDogIndex } };
}

export default Home;
